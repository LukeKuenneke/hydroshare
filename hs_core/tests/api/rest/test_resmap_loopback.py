import os
import json
import zipfile
import tempfile
import shutil

from rest_framework import status

from hs_core.hydroshare import resource
from hs_core.tests.api.utils import MyTemporaryUploadedFile
from .base import HSRESTTestCase


class TestResourceFileLoopback(HSRESTTestCase):
    """ Test that the URLS we write can be read """

    def setUp(self):
        super(TestResourceFileLoopback, self).setUp()

        self.tmp_dir = tempfile.mkdtemp()

        # Make a text file
        self.txt_file_name = 'text.txt'
        self.txt_file_path = os.path.join(self.tmp_dir, self.txt_file_name)
        txt = open(self.txt_file_path, 'w')
        txt.write("Hello World\n")
        txt.close()

        self.raster_file_name = 'cea.tif'
        self.raster_file_path = 'hs_core/tests/data/cea.tif'

        # Make a zip file
        zip_path = os.path.join(self.tmp_dir, 'test.zip')
        with zipfile.ZipFile(zip_path, 'w') as zfile:
            zfile.write(self.raster_file_path)
            zfile.write(self.txt_file_path)

        # Create a resource with zipfile, do not un-pack
        payload = MyTemporaryUploadedFile(open(zip_path, 'rb'), name=zip_path,
                                          content_type='application/zip',
                                          size=os.stat(zip_path).st_size)
        res = resource.create_resource('GenericResource',
                                       self.user,
                                       'My Test resource',
                                       files=(payload,),
                                       unpack_file=True)
        self.pid = res.short_id
        self.resources_to_delete.append(self.pid)

    def tearDown(self):
        shutil.rmtree(self.tmp_dir)

        super(TestResourceFileLoopback, self).tearDown()

    def test_resource_file_list(self):
        """ urls generated by listings of public resources can be read """
        response = self.client.get("/hsapi/resource/{pid}/files/".format(pid=self.pid),
                                   format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        content = json.loads(response.content)
        self.assertEqual(content['count'], 2)
        for c in content['results']:
            print("url={}".format(c['url']))
            u = c['url']
            print("u={}".format(u))
            # strip off host header to use client library 
            roffset = u.index('/resource/') 
            url = u[roffset:]
            print("url={}".format(url))
            response = self.client.get(url)
            print("response.status_code=={}".format(url))
            self.assertEqual(response.status_code, status.HTTP_302_FOUND)
            print("response.url={}".format(response.url)) 
            # TODO: This is uncredentialed access and fails 
            response2 = self.client.get(response.url)
            self.assertEqual(response2.status_code, status.HTTP_200_OK)

            # Now add a trailing slash to insure that hs_restclient still works
            
            url += '/'
            print("url={}".format(url))
            response = self.client.get(url)
            print("response.status_code=={}".format(url))
            self.assertEqual(response.status_code, status.HTTP_302_FOUND)
            print("response.url={}".format(response.url)) 
            response2 = self.client.get(response.url)
            self.assertEqual(response2.status_code, status.HTTP_200_OK)

        self.assertTrue(False)
