import os
import json
import tempfile
import shutil

from rest_framework import status

from hs_core import hydroshare

from .base import HSRESTTestCase


class TestResourceFileLoopback(HSRESTTestCase):
    """ Test that the URLS we write can be read """

    def setUp(self):
        super(TestResourceFileLoopback, self).setUp()

        self.tmp_dir = tempfile.mkdtemp()

        # Make a text file
        self.txt_file_name = 'text.txt'
        self.txt_file_path = os.path.join(self.tmp_dir, self.txt_file_name)
        txt = open(self.txt_file_path, 'w')
        txt.write("Hello World\n")
        txt.close()

        # create a file
        self.test_file_name1 = 'file1.txt'
        self.file_name_list = [self.test_file_name1, ]

        # put predictable contents into these
        test_file = open(self.test_file_name1, 'w')
        test_file.write("Test text file in file1.txt")
        test_file.close()

        # add one file to the resource
        self.test_file_1 = open(self.test_file_name1, 'r')

        # enough information to make it public
        self.res = hydroshare.create_resource(
            'GenericResource',
            self.user,
            'My Test Resource',
            files=[self.test_file_1],
            keywords=['kw1', 'kw2'],
            metadata=[{"description": {"abstract": "myabstract"}}]
        )

        self.res.set_public(True)

    def tearDown(self):
        shutil.rmtree(self.tmp_dir)
        self.res.delete()
        super(TestResourceFileLoopback, self).tearDown()

    def test_manual_url(self):
        """ URLS generated by programmer work fine """
        # without trailing /
        url = "/resource/{pid}/data/contents/{file}"\
            .format(pid=self.res.short_id, file=self.test_file_name1)
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_302_FOUND)
        print(response.url)
        response2 = self.client.get(response.url)
        self.assertEqual(response2.status_code, status.HTTP_200_OK)

    def test_manual_url_with_slash(self):
        """ URLs generated by programmer with trailing slash work fine """
        url = "/resource/{pid}/data/contents/{file}/"\
            .format(pid=self.res.short_id, file=self.test_file_name1)
        response = self.client.get(url)
        print(response.url)
        self.assertEqual(response.status_code, status.HTTP_302_FOUND)
        response2 = self.client.get(response.url)
        self.assertEqual(response2.status_code, status.HTTP_200_OK)

    def test_predicted_file_url(self):
        """ URLS generated by ResourceFile work properly """
        url = self.res.files.all()[0].url
        response = self.client.get(url)
        print(response.url)
        self.assertEqual(response.status_code, status.HTTP_302_FOUND)
        response2 = self.client.get(response.url)
        self.assertEqual(response2.status_code, status.HTTP_200_OK)

    def test_resource_file_list(self):
        """ urls generated by listings of public resources can be read """
        response = self.client.get("/hsapi/resource/{pid}/files/"\
            .format(pid=self.res.short_id), format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        content = json.loads(response.content)
        self.assertEqual(content['count'], 1)
        c = content['results'][0]
        print("url={}".format(c['url']))
        u = c['url']
        print("u={}".format(u))
        # strip off host header to use client library
        roffset = u.index('/resource/')
        url = u[roffset:]
        print("url={}".format(url))
        response = self.client.get(url)
        print("response.status_code=={}".format(url))
        self.assertEqual(response.status_code, status.HTTP_302_FOUND)
        print("response.url={}".format(response.url))
        # resource is public, so this works.
        response2 = self.client.get(response.url)
        self.assertEqual(response2.status_code, status.HTTP_200_OK)

        # Now add a trailing slash to insure that hs_restclient still works

        url += '/'
        print("url={}".format(url))
        response = self.client.get(url)
        print("response.status_code=={}".format(url))
        self.assertEqual(response.status_code, status.HTTP_302_FOUND)
        print("response.url={}".format(response.url))
        response2 = self.client.get(response.url)
        self.assertEqual(response2.status_code, status.HTTP_200_OK)

        self.assertTrue(False)
